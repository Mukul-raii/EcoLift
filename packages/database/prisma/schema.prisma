// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  firebaseUid String    @unique
  name        String
  email       String    
  phone       String?   
  role        Role      @default(RIDER)

  driverProfile DriverProfile?
  ridesAsRider  Ride[]  @relation("RiderRides")
  ridesAsDriver Ride[]  @relation("DriverRides")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime 
}

model DriverProfile {
  id            Int    @id @default(autoincrement())
  userId        String    @unique
  licenseNumber String @unique
  vehicleNumber String @unique
  vehicleType   String
  status        DriverStatus @default(UNAVAILABLE)

  user User @relation(fields: [userId], references: [firebaseUid])
}

model Ride {
  id       Int    @id @default(autoincrement())
  riderId  String
  driverId String? // can be null when requested
  status  RideStatus @default(REQUESTED)

  fromLocation String
  toLocation   String
  pickUpLat   Float?
  pickUpLong  Float?
  dropOffLat  Float?
  dropOffLong Float?
  otp        String? // can be null when ride is completed or cancelled

  rider  User @relation("RiderRides", fields: [riderId], references: [firebaseUid])
  driver User? @relation("DriverRides", fields: [driverId], references: [firebaseUid])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Role {
  RIDER
  DRIVER
  ADMIN
}

enum DriverStatus {
  AVAILABLE
  UNAVAILABLE
  ON_TRIP
}

enum RideStatus {
  PENDING
  REQUESTED
  ACCEPTED
  REJECTED
  IN_PROGRESS
  STARTED
  COMPLETED
  CANCELLED
  ASSIGNED
}