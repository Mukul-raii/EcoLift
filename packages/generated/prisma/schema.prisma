// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rider {
  id  Int    @id @default(autoincrement())
  uid String @unique

  name  String
  email String @unique
  phone String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ride      Ride[]
}

model Driver {
  id  Int    @id @default(autoincrement())
  uid String @unique

  name  String
  email String @unique
  phone String @unique

  licenseNumber String @unique
  vehicleNumber String @unique
  vehicleType   String

  status String @default("AVAILABLE") // AVAILABLE, UNAVAILABLE, ON_TRIP

  //currentLocation LatLng 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Ride      Ride[]
}

model Ride {
  id       Int    @id @default(autoincrement())
  riderId  Int
  driverId Int? // this can be null when the ride is first requested
  status   String @default("REQUESTED") // REQUESTED, ACCEPTED, IN_PROGRESS, COMPLETED, CANCELLED

  //pickup and dropoff locations
  pickUpLat   Float
  pickUpLong  Float
  dropOffLat  Float
  dropOffLong Float

  rider  Rider   @relation(fields: [riderId], references: [id])
  driver Driver? @relation(fields: [driverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
